"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['male', 'female']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
code = ['#6cc0e5', '#fb4f4f']
plotdata.plot(kind="bar", color = code, edgecolor = 'black')
plt.ylabel("Mean", fontsize=10)
plt.xticks(rotation=45, fontsize = 10)
plt.legend(fontsize=10)
plt.show()
num = [1.0, 2.0]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df.loc[df['Sex'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['male', 'female']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
code = ['#6cc0e5', '#fb4f4f']
plotdata.plot(kind="bar", color = code, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=45)
plt.legend()
plt.show()
num = [1.0, 2.0]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df.loc[df['Sex'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['male', 'female']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
code = ['#6cc0e5', '#fb4f4f']
plotdata.plot(kind="bar", color = code, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0)
plt.legend()
plt.show()
plt.xticks(rotation=5)
num = [1.0, 2.0]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df.loc[df['Sex'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['male', 'female']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
code = ['#6cc0e5', '#fb4f4f']
plotdata.plot(kind="bar", color = code, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=5, fontsize = 5)
plt.legend()
plt.show()
num = [1.0, 2.0]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df.loc[df['Sex'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['male', 'female']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
code = ['#6cc0e5', '#fb4f4f']
plotdata.plot(kind="bar", color = code, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 8)
plt.legend()
plt.show()
num = [1.0, 2.0]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df.loc[df['Sex'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['male', 'female']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
code = ['#6cc0e5', '#fb4f4f']
plotdata.plot(kind="bar", color = code, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 6)
plt.legend()
plt.show()
num = [1.0, 2.0]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df.loc[df['Sex'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['male', 'female']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
code = ['#6cc0e5', '#fb4f4f']
plotdata.plot(kind="bar", color = code, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 7)
plt.legend()
plt.show()
sex_lst = []
num_females = []
for n in df['chat_room_id']:
a = df[df['chat_room_id'] == n]
temp_sex = []
for i in a['Sex']:
temp_sex.append(i)
sex_lst.append(temp_sex)
for n in sex_lst:
num_females.append(n.count(2))
df['Number of Females'] = num_females
df_fem = df.loc[df['Sex']==2]
df_fem = df_fem.drop(df_fem.loc[df_fem['Number of Females']==4].index)
df_fem.reset_index(drop = True)
num = [1,2,3]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df_fem.loc[df_fem['Number of Females'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['female minority', 'gender parity', 'female majority']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
CB_color_cycle = ['#6cc0e5', '#fbc93d', '#fb4f4f']
plotdata.plot(kind="bar", color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 7)
plt.legend()
plt.show()
df_fem = df.loc[df['Sex']==2]
df_fem = df_fem.drop(df_fem.loc[df_fem['Number of Females']==4].index)
df_fem.reset_index(drop = True)
num = [1,2,3]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df_fem.loc[df_fem['Number of Females'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['female minority', 'gender parity', 'female majority']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
CB_color_cycle = ['#6cc0e5', '#fbc93d', '#fb4f4f']
plotdata.plot(kind="bar", color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 7)
plt.legend()
plt.show()
df_male = df.loc[df['Sex']==1]
df_male = df_male.drop(df_male.loc[df_male['Number of Females']==0].index)
df_male.reset_index(drop = True)
num = [1,2,3]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df_male.loc[df_male['Number of Females'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['female minority', 'gender parity', 'female majority']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
plotdata.plot(kind="bar", color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 7)
plt.legend()
plt.show()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_females.png')
plt.show()
df_fem = df.loc[df['Sex']==2]
df_fem = df_fem.drop(df_fem.loc[df_fem['Number of Females']==4].index)
df_fem.reset_index(drop = True)
num = [1,2,3]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df_fem.loc[df_fem['Number of Females'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['female minority', 'gender parity', 'female majority']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
CB_color_cycle = ['#6cc0e5', '#fbc93d', '#fb4f4f']
plotdata.plot(kind="bar", color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 7)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_females.png')
plt.show()
df_male = df.loc[df['Sex']==1]
df_male = df_male.drop(df_male.loc[df_male['Number of Females']==0].index)
df_male.reset_index(drop = True)
num = [1,2,3]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df_male.loc[df_male['Number of Females'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['female minority', 'gender parity', 'female majority']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
plotdata.plot(kind="bar", color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 7)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_males.png')
plt.show()
num = [1.0, 2.0]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df.loc[df['Sex'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['male', 'female']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
code = ['#6cc0e5', '#fb4f4f']
plotdata.plot(kind="bar", color = code, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 7)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_gender.png')
plt.show()
df_male = df.loc[df['Sex']==1]
df_male = df_male.drop(df_male.loc[df_male['Number of Females']==0].index)
df_male.reset_index(drop = True)
num = [1,2,3]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df_male.loc[df_male['Number of Females'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['female minority', 'gender parity', 'female majority']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
plotdata.plot(kind="bar", color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 6)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_males.png')
plt.show()
df_male = df.loc[df['Sex']==1]
df_male = df_male.drop(df_male.loc[df_male['Number of Females']==0].index)
df_male.reset_index(drop = True)
num = [1,2,3]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df_male.loc[df_male['Number of Females'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['female minority', 'gender parity', 'female majority']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
plotdata.plot(kind="bar", color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 7)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_males.png')
plt.show()
