import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy
df = pd.read_csv('/Users/jennytran/Documents/GitHub/smoc-project/data/SMOCDemoGCA.xlsx - SMOCDemoGCA.csv')
df = df[['person_id','chat_room_id','z.participation',
'z.social.impact',
'z.overall.responsivity',
'z.internal.cohesion',
'z.newness',
'z.comm.density', 'Sex']]
df = df.dropna().reset_index(drop=True)
df = df[df.groupby('chat_room_id')['chat_room_id'].transform('size') == 4].reset_index(drop=True)
len(df)
male = df[df['Sex'] == 1]
female = df[df['Sex'] == 2]
print('male:', len(male['person_id'].unique()))
print('female:', len(female['person_id'].unique()))
num = [1.0, 2.0]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df.loc[df['Sex'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['male', 'female']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
code = ['#6cc0e5', '#fb4f4f']
plotdata.plot(kind="bar", color = code, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 7)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_gender.png')
plt.show()
t_test_all = []
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.participation'], df_male['z.participation'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.social.impact'], df_male['z.social.impact'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.overall.responsivity'], df_male['z.overall.responsivity'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.internal.cohesion'], df_male['z.internal.cohesion'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.newness'], df_male['z.newness'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.comm.density'], df_male['z.comm.density'])))
df_ttest_all = pd.DataFrame(t_test_all, columns = ['f-statistic', 'p-value'])
df_ttest_all.insert(loc = 0, column = 'GCA dimensions', value = cols)
df_ttest_all
sex_lst = []
num_females = []
for n in df['chat_room_id']:
a = df[df['chat_room_id'] == n]
temp_sex = []
for i in a['Sex']:
temp_sex.append(i)
sex_lst.append(temp_sex)
for n in sex_lst:
num_females.append(n.count(2))
df['Number of Females'] = num_females
df_fem = df.loc[df['Sex']==2]
df_fem = df_fem.drop(df_fem.loc[df_fem['Number of Females']==4].index)
df_fem.reset_index(drop = True)
num = [1,2,3]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df_fem.loc[df_fem['Number of Females'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['female minority', 'gender parity', 'female majority']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
CB_color_cycle = ['#6cc0e5', '#fbc93d', '#fb4f4f']
plotdata.plot(kind="bar", color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 7)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_females.png')
plt.show()
df_male = df.loc[df['Sex']==1]
df_male = df_male.drop(df_male.loc[df_male['Number of Females']==0].index)
df_male.reset_index(drop = True)
num = [1,2,3]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df_male.loc[df_male['Number of Females'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['female minority', 'gender parity', 'female majority']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
plotdata.plot(kind="bar", color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 7)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_males.png')
plt.show()
plotdata.plot(kind="bar", color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 7)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_males.png')
plt.show()
```
t_test_all = []
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.participation'], df_male['z.participation'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.social.impact'], df_male['z.social.impact'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.overall.responsivity'], df_male['z.overall.responsivity'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.internal.cohesion'], df_male['z.internal.cohesion'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.newness'], df_male['z.newness'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.comm.density'], df_male['z.comm.density'])))
df_ttest_all = pd.DataFrame(t_test_all, columns = ['f-statistic', 'p-value'])
df_ttest_all.insert(loc = 0, column = 'GCA dimensions', value = cols)
df_ttest_all
cols = ["participation", "social impact", "overall responsivity", "internal cohesion", "newness", "communication density"]
cols = ["participation", "social impact", "overall responsivity", "internal cohesion", "newness", "communication density"]
t_test_all = []
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.participation'], df_male['z.participation'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.social.impact'], df_male['z.social.impact'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.overall.responsivity'], df_male['z.overall.responsivity'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.internal.cohesion'], df_male['z.internal.cohesion'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.newness'], df_male['z.newness'])))
t_test_all.append(list(scipy.stats.ttest_ind(df_fem['z.comm.density'], df_male['z.comm.density'])))
df_ttest_all = pd.DataFrame(t_test_all, columns = ['f-statistic', 'p-value'])
df_ttest_all.insert(loc = 0, column = 'GCA dimensions', value = cols)
df_ttest_all
anova_male = []
f_min = df_male.loc[df_male['Number of Females'] == 1]
g_par = df_male.loc[df_male['Number of Females'] == 2]
f_maj = df_male.loc[df_male['Number of Females'] == 3]
anova_male.append(list(scipy.stats.f_oneway(f_min['z.participation'], g_par['z.participation'], f_maj['z.participation'])))
anova_male.append(list(scipy.stats.f_oneway(f_min['z.social.impact'], g_par['z.social.impact'], f_maj['z.social.impact'])))
anova_male.append(list(scipy.stats.f_oneway(f_min['z.overall.responsivity'], g_par['z.overall.responsivity'], f_maj['z.overall.responsivity'])))
anova_male.append(list(scipy.stats.f_oneway(f_min['z.internal.cohesion'], g_par['z.internal.cohesion'], f_maj['z.internal.cohesion'])))
anova_male.append(list(scipy.stats.f_oneway(f_min['z.newness'], g_par['z.newness'], f_maj['z.newness'])))
anova_male.append(list(scipy.stats.f_oneway(f_min['z.comm.density'], g_par['z.comm.density'], f_maj['z.comm.density'])))
df_anova_male = pd.DataFrame(anova_male, columns = ['f-statistic', 'p-value'])
df_anova_male.insert(loc = 0, column = 'GCA dimensions', value = cols)
df_anova_male
anova_fem = []
f_min = df_fem.loc[df_fem['Number of Females'] == 1]
g_par = df_fem.loc[df_fem['Number of Females'] == 2]
f_maj = df_fem.loc[df_fem['Number of Females'] == 3]
anova_fem.append(list(scipy.stats.f_oneway(f_min['z.participation'], g_par['z.participation'], f_maj['z.participation'])))
anova_fem.append(list(scipy.stats.f_oneway(f_min['z.social.impact'], g_par['z.social.impact'], f_maj['z.social.impact'])))
anova_fem.append(list(scipy.stats.f_oneway(f_min['z.overall.responsivity'], g_par['z.overall.responsivity'], f_maj['z.overall.responsivity'])))
anova_fem.append(list(scipy.stats.f_oneway(f_min['z.internal.cohesion'], g_par['z.internal.cohesion'], f_maj['z.internal.cohesion'])))
anova_fem.append(list(scipy.stats.f_oneway(f_min['z.newness'], g_par['z.newness'], f_maj['z.newness'])))
anova_fem.append(list(scipy.stats.f_oneway(f_min['z.comm.density'], g_par['z.comm.density'], f_maj['z.comm.density'])))
df_anova_fem = pd.DataFrame(anova_fem, columns = ['f-statistic', 'p-value'])
df_anova_fem.insert(loc = 0, column = 'GCA dimensions', value = cols)
df_anova_fem
df_male = df.loc[df['Sex']==1]
df_male = df_male.drop(df_male.loc[df_male['Number of Females']==0].index)
df_male.reset_index(drop = True)
num = [1,2,3]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df_male.loc[df_male['Number of Females'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['female minority', 'gender parity', 'female majority']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
plotdata.plot(kind="bar", figsize=(14, 7), color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 7)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_males.png')
plt.show()
df_male = df.loc[df['Sex']==1]
df_male = df_male.drop(df_male.loc[df_male['Number of Females']==0].index)
df_male.reset_index(drop = True)
num = [1,2,3]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df_male.loc[df_male['Number of Females'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['female minority', 'gender parity', 'female majority']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
plotdata.plot(kind="bar", figsize=(14, 7), color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 6)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_males.png')
plt.show()
df_fem = df.loc[df['Sex']==2]
df_fem = df_fem.drop(df_fem.loc[df_fem['Number of Females']==4].index)
df_fem.reset_index(drop = True)
num = [1,2,3]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df_fem.loc[df_fem['Number of Females'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['female minority', 'gender parity', 'female majority']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
CB_color_cycle = ['#6cc0e5', '#fbc93d', '#fb4f4f']
plotdata.plot(kind="bar", figsize=(14, 7), color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 6)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_females.png')
plt.show()
num = [1.0, 2.0]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df.loc[df['Sex'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['male', 'female']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
code = ['#6cc0e5', '#fb4f4f']
plotdata.plot(kind="bar", figsize=(14, 7), color = code, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 6)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_gender.png')
plt.show()
quarto install tinytex
num = [1.0, 2.0]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df.loc[df['Sex'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['male', 'female']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
code = ['#6cc0e5', '#fb4f4f']
plotdata.plot(kind="bar", color = code, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 6)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_gender.png')
plt.show()
df_fem = df.loc[df['Sex']==2]
df_fem = df_fem.drop(df_fem.loc[df_fem['Number of Females']==4].index)
df_fem.reset_index(drop = True)
num = [1,2,3]
z_par = []
z_soc = []
z_overesp = []
z_internal = []
z_new = []
z_dens = []
for n in num:
y = df_fem.loc[df_fem['Number of Females'] == n]
z_par.append(sum(y['z.participation']) / len(y))
z_soc.append(sum(y['z.social.impact']) / len(y))
z_overesp.append(sum(y['z.overall.responsivity']) / len(y))
z_internal.append(sum(y['z.internal.cohesion']) / len(y))
z_new.append(sum(y['z.newness']) / len(y))
z_dens.append(sum(y['z.comm.density']) / len(y))
plotdata = pd.DataFrame({
"participation":z_par,
"social impact":z_soc,
"overall responsivity":z_overesp,
"internal cohesion":z_internal,
"newness":z_new,
"communication density":z_dens
},
index=['female minority', 'gender parity', 'female majority']
)
plotdata = plotdata + .15
plotdata = plotdata.transpose()
CB_color_cycle = ['#6cc0e5', '#fbc93d', '#fb4f4f']
plotdata.plot(kind="bar", color = CB_color_cycle, edgecolor = 'black')
plt.ylabel("Mean")
plt.xticks(rotation=0, fontsize = 6)
plt.legend()
plt.savefig('/Users/jennytran/Documents/GitHub/smoc-project/outputs/gca_females.png')
plt.show()
